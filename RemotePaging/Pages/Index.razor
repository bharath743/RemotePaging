@page "/"
@using System.Collections.ObjectModel

@inject ServerService server

<PageTitle>Index</PageTitle>

<button class="btn btn-outline-primary" @onclick="(()=>LoadFromApi1())">API 1</button>
<button class="btn btn-outline-primary" @onclick="(()=>LoadDataFromAPi2())">API 2</button>
<button class="btn btn-outline-info" @onclick="(()=>AutoFitAsync())">AutoFit</button>
@if (DataSource.Any())
{
    <a class="link-info" @onclick="(()=>LoadMore())" style="display:@d1;">More</a>
    <a class="link-info" @onclick="(()=>LoadMore())" style="display:@d2;">More</a>
    <TelerikGrid @ref="@telerikGrid"
             Sortable=true
             Pageable=true
             FilterMode="@Telerik.Blazor.GridFilterMode.FilterMenu"
             Resizable="true" Data="@DataSource">
        <GridColumns>
            @foreach (var p in DataSource.First().GetType().GetProperties())
        {
            <GridColumn Field="@p.Name" Title="@p.Name" Id="@p.Name" FieldType="@p.PropertyType" />
        }
    </GridColumns>
</TelerikGrid>
}


@code {
    TelerikGrid<object> telerikGrid;
    ObservableCollection<object> DataSource = new ObservableCollection<object>();
    private object item = default!;

    string d1 = "block";
    string d2 = "none";

    protected override async Task OnInitializedAsync()
    {
        //load the  10 first elements when rendering the component.
        //from api to avoid null reference exception
        var initData = await server.GetAsync(20, 0);
        DataSource = new ObservableCollection<object>(initData);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await telerikGrid.AutoFitAllColumnsAsync();//auto fit all cols after component is loaded
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    async void LoadFromApi1()
    {
        d1 = "block";
        d2 = "none";
        var initData = await server.GetAsync(20, 0);
        DataSource = new ObservableCollection<object>(initData);
        await Task.Delay(1000);
        await telerikGrid.AutoFitAllColumnsAsync();
    }

    async void AutoFitAsync() => await telerikGrid.AutoFitAllColumnsAsync();

    async void LoadDataFromAPi2()
    {
        d1 = "none";
        d2 = "block";
        var data = await server.GetAsync2(20, 0);
        DataSource = new ObservableCollection<object>(data);
        await Task.Delay(1000);
        await telerikGrid.AutoFitAllColumnsAsync();
    }

    async void LoadMore()
    {
        
        var more = await server.GetAsync(20, 20);//request new amount of data.
        DataSource = new ObservableCollection<object>(DataSource.Concat(more));//merge the 2 lists. and update the data soucer for paging
        await Task.Delay(1000);
        await telerikGrid.AutoFitAllColumnsAsync();//auto fit all cols
    }

    async void LoadMore2()
    {
        
        var more = await server.GetAsync2(20, 20);//request new amount of data.
        DataSource = new ObservableCollection<object>(DataSource.Concat(more));//merge the 2 lists. and update the data soucer for paging
        await Task.Delay(1000);
        await telerikGrid.AutoFitAllColumnsAsync();//auto fit all cols
    }

    //async void ReadData(GridReadEventArgs args)
    //{
    //    if (args.Request.Page > 1)
    //    {
    //        DataSource = new List<object>(DataSource);
    //        var data = await server.GetAsync(args.Request.PageSize, args.Request.Page > 1 ? args.Request.PageSize : 0);
    //        DataSource.AddRange(data);
    //    }
    //    //ensure that there is data from the service api
    //    if (DataSource.Any())
    //    {
    //        //then assign data and the count.
    //        args.Data = DataSource;//tranforme the object info into a generic object.
    //        args.Total = DataSource.Count * 2;
    //    }
    //}
}