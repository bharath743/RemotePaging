@page "/"
@using System.Collections.ObjectModel

@inject ServerService server

<PageTitle>Index</PageTitle>



Selected value: @pageSize

<div class="row">
    <div class="col-sm">
        <button class="btn btn-outline-info" @onclick="(()=>AutoFitAsync())">AutoFit</button>
        @*</div>
            <div class="col-sm">*@
        <TelerikDropDownList Data="@PageSizes" TextField="Page Size"
                             ValueField="MyValueField" @bind-Value="pageSize" Width="60px">
        </TelerikDropDownList>
    </div>
</div>


<TelerikGrid @ref="@telerikGrid"
             Sortable=true
             Pageable=true PageSize="@pageSize"
             FilterMode="@Telerik.Blazor.GridFilterMode.FilterMenu"
             TItem="@Info3" Data="@DataSource"
             Resizable=true AutoGenerateColumns=true>
    <GridColumns>
        <GridAutoGeneratedColumns></GridAutoGeneratedColumns>
    </GridColumns>
</TelerikGrid>
<TelerikStackLayout Orientation="Telerik.Blazor.StackLayoutOrientation.Horizontal" Width="20px"
                    VerticalAlign="Telerik.Blazor.StackLayoutVerticalAlign.Center" Height="20px" Class="mt-4">
    <button class="btn btn-outline-dark" @onclick="@(()=>PreviousPage())"><span class="oi oi-arrow-left"></span></button>
    <h6 class="badge text-black p-4">Page @pageNumber</h6>
    <button class="btn btn-outline-dark" @onclick="@(()=>ReadData())"><span class="oi oi-arrow-right"></span></button>
</TelerikStackLayout>



@code {
    TelerikGrid<Info3>? telerikGrid;
    List<Info3> DataSource = new List<Info3>();
    int[] PageSizes = new int[] { 10, 15, 20 };
    private object item = default!;

    int pageNumber = 1;
    int dataCount = 0;
    int pageSize = 0;

    string d1 = "block";
    string d2 = "none";

    protected override async Task OnInitializedAsync()
    {
        //load the  10 first elements when rendering the component.
        //from api to avoid null reference exception
        pageSize = PageSizes.First();
        var initData = await server.GetAsync3(pageSize, 0);
        DataSource = new List<Info3>(initData.value);
        AutoFitAsync();
    }

    private async Task ReadData()
    {
        var data = await server.GetAsync3(pageSize, pageNumber > 1 ? 10 : 0);
        DataSource = new List<Info3>(data.value);
        pageNumber++;
        dataCount = data.OdataCount;
        AutoFitAsync();
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 0)
        {
            var data = await server.GetAsync3(pageSize, pageNumber > 1 ? 10 : 0);
            DataSource = new List<Info3>(data.value);
            dataCount = data.OdataCount;
            AutoFitAsync();
        }
    }

    //async void LoadFromApi1()
    //{
    //    var initData = await server.GetAsync(20, 0);
    //    d1 = "block";
    //    d2 = "none";
    //    DataSource.Clear();//clear the data source.
    //    DataSource = new List<object>(initData);
    //    AutoFitAsync();
    //    Console.WriteLine("loaded and fits");
    //}

    async void AutoFitAsync() => await telerikGrid.AutoFitAllColumnsAsync();

    //async void LoadDataFromAPi2()
    //{
    //    var data = await server.GetAsync2(20, 0);
    //    d1 = "none";
    //    d2 = "block";
    //    DataSource.Clear();//clear the data source.
    //    DataSource = new List<object>(data);
    //    AutoFitAsync();
    //    Console.WriteLine("loaded and fits");
    //}

    //async void LoadMore()
    //{
    //    var more = await server.GetAsync(20, 20);//request new amount of data.
    //    DataSource = new List<object>(DataSource.Concat(more));//merge the 2 lists. and update the data soucer for paging
    //    AutoFitAsync();
    //}

    //async void LoadMore2()
    //{
    //    var more = await server.GetAsync2(20, 20);//request new amount of data.
    //    DataSource = new List<object>(DataSource.Concat(more));//merge the 2 lists. and update the data soucer for paging
    //    AutoFitAsync();
    //}

    //async void ReadData(GridReadEventArgs args)
    //{
    //    if (args.Request.Page > 1)
    //    {
    //        DataSource = new List<object>(DataSource);
    //        var data = await server.GetAsync(args.Request.PageSize, args.Request.Page > 1 ? args.Request.PageSize : 0);
    //        DataSource.AddRange(data);
    //    }
    //    //ensure that there is data from the service api
    //    if (DataSource.Any())
    //    {
    //        //then assign data and the count.
    //        args.Data = DataSource;//tranforme the object info into a generic object.
    //        args.Total = DataSource.Count * 2;
    //    }
    //}
}